package del.ac.id.demo.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.data.mongodb.core.query.Criteria;

import del.ac.id.demo.jpa.Item;
import del.ac.id.demo.jpa.Store;
import del.ac.id.demo.jpa.StoreRepository;

@RestController
public class StoreController {
	@Autowired StoreRepository storeRepository;
	@Autowired MongoTemplate mongoTemplate;
	
	public StoreController(StoreRepository storeRepository,MongoTemplate mongoTemplate) {
		this.mongoTemplate = mongoTemplate;
		this.storeRepository = storeRepository;
	}
	
	@GetMapping("/index")
	public ModelAndView Index(@ModelAttribute Item item, BindingResult bindingResult, Model model) {
		if(bindingResult.hasErrors()) {
			System.out.println("Error");
		}
		ModelAndView mv = new ModelAndView("index");
		List<Store> listStore = storeRepository.findAll();
		mv.addObject("listStore", listStore);
		return mv;
	}
	@GetMapping("/")
	public ModelAndView NoData(@ModelAttribute Item item, BindingResult bindingResult, Model model) {
		if(bindingResult.hasErrors()) {
			System.out.println("Error");
		}
		ModelAndView mv = new ModelAndView("index");
		List<Store> listStore = storeRepository.findAll();
		mv.addObject("listStore", listStore);
		return mv;
	}
	@GetMapping("/storeDetail/{id}")
	public ModelAndView storeDetail(@ModelAttribute Store store, BindingResult bindingResult, Model model,
			@PathVariable("id") String id) {
		Query query = new Query(Criteria.where("id").is(id));
		Store selectedStore = mongoTemplate.findOne(query, Store.class);

		Query QlistItem = new Query(Criteria.where("store_name").is(selectedStore.getStore_name()));
		List<Store> listStore = mongoTemplate.find(QlistItem, Store.class);
		ModelAndView mv = new ModelAndView("storeDetail");
		if(listStore != null) {
			mv.addObject("storeItems",listStore);
			System.out.println("Detail"+listStore.size());
			return mv;
		}
		else {
			System.out.println("List Item Kosong");
			return mv;
		}
	}
}
